apiVersion: apps/v1
kind: Deployment
metadata:
  name: docker-registry
  labels:
    app: docker-registry
  namespace: docker-registry
spec:
  selector:
    matchLabels:
      app: docker-registry
  replicas: 1
  strategy: 
    type: RollingUpdate
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: docker-registry
    spec:
#      imagePullSecrets:
# {{- if .Values.securityContext.enabled }}
#       securityContext:
#         fsGroup: {{ .Values.securityContext.fsGroup }}
#         runAsUser: {{ .Values.securityContext.runAsUser }}
# {{- end }}
      containers:
      - name: docker-registry
        image: registry:2.7.1
        imagePullPolicy: IfNotPresent
        command:
        - /bin/registry
        - serve
        - /etc/docker/registry/config.yml
        ports:
          - containerPort: 5000

        livenessProbe:
          httpGet:
#              scheme: HTTPS
            path: /
            port: 5000
        readinessProbe:
          httpGet:
#              scheme: HTTPS
            path: /
            port: 5000

        resources:
          limits:
            cpu: "250m"
            memory: "512Mi"
          requests:
            cpu: "125m"
            memory: "256Mi"

        env:
        - name: REGISTRY_HTTP_SECRET
          valueFrom:
            secretKeyRef:
              name: docker-registry-secret
              key: haSharedSecret
        - name: REGISTRY_HTTP_ADDR
          value: :5000
        - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
          value: "/var/lib/registry"
        - name: REGISTRY_STORAGE_DELETE_ENABLED
          value: "true"

#            - name: REGISTRY_HTTP_TLS_CERTIFICATE
#              value: /etc/ssl/docker/tls.crt
#
#            - name: REGISTRY_HTTP_TLS_KEY
#              value: /etc/ssl/docker/tls.key
        volumeMounts:
        - name: data
          mountPath: /var/lib/registry/
        - name: "docker-registry-config"
          mountPath: "/etc/docker/registry"
#            - mountPath: /etc/ssl/docker
#              name: tls-cert
#              readOnly: true
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: docker-registry-pvc
      - name: docker-registry-config
        configMap:
          name: docker-registry-config
#        - name: tls-cert
#          secret:
#            secretName: {{ .Values.tlsSecretName }}
